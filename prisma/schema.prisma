generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Achievement Schema
model Achievement {
  achievementId BigInt             @id @default(autoincrement())
  userId        BigInt
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  organizedBy   String
  mode          Mode
  isTechnical   Boolean
  result        String
  certificate   String?
  status        Status             @default(PENDING)
  dateCreated   DateTime           @default(now())
  dateModified  DateTime           @updatedAt
  images        AchievementImage[]
  user          User               @relation("UserAchievements", fields: [userId], references: [userId], onDelete: Cascade)
}

model AchievementImage {
  id            BigInt      @id @default(autoincrement())
  achievementId BigInt
  imageUrl      String
  achievement   Achievement @relation(fields: [achievementId], references: [achievementId])

  @@map("achievementImages")
}

model AchievementAnnouncement {
  id            BigInt   @id @default(autoincrement())
  userId        BigInt
  achievementId BigInt
  mentorId      BigInt
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
}

model VerificationRequest {
  id            BigInt   @id @default(autoincrement())
  achievementId BigInt
  studentId     BigInt
  mentorId      BigInt
  status        Status   @default(PENDING)
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
}

model Notification {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  content      String
  status       Status
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt
}

// For Achievements project
enum Mode {
  ONLINE
  OFFLINE
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

// For Society project
enum SocietyStatus {
  ACTIVE
  INACTIVE
}

enum SocietyType {
  TECHNICAL
  NON_TECHNICAL
}

// Combined Schema
model Faculty {
  facultyId          BigInt              @id @default(autoincrement())
  name               String
  department         String
  specialization     String
  joiningDate        DateTime
  resigningDate      DateTime?
  phone              String              @unique
  email              String              @unique
  position           String
  designation        String
  profilePictureUrl  String
  others             String
  isActiveFaculty    Boolean             @default(true)
  users              User[]              @relation("FacultyUsers")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  facultySociety     SocietyProfile[]    @relation("SocietyFaculty")
  mentorshipPrograms MentorshipProgram[] @relation("FacultyToMentorship")
}

enum Role {
  STUDENT
  ALUMNI
}

model User {
  userId                    BigInt                    @id @default(autoincrement())
  societyId                 BigInt?
  firstName                 String
  lastName                  String
  email                     String                    @unique
  mobile                    String                    @unique
  enrollmentNumber          Int                       @unique
  password                  String
  section                   String
  role                      Role
  branch                    String
  passingYear               Int
  fathersName               String
  mothersName               String
  hobby                     String
  parentsPhone              String
  isApproved                Boolean                   @default(false)
  isVerified                Boolean                   @default(false)
  profilePictureUrl         String?
  githubProfileUrl          String?
  linkedInProfileUrl        String?
  twitterProfileUrl         String?
  gfgProfileUrl             String?
  codingNinjaProfileUrl     String?
  leetcodeProfileUrl        String?
  codeforcesProfileUrl      String?
  instagramProfileUrl       String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  facultyId                 BigInt?
  faculty                   Faculty?                   @relation("FacultyUsers", fields: [facultyId], references: [facultyId])
  achievements              Achievement[]             @relation("UserAchievements")
  professionalInformations  ProfessionalInformation[] @relation("UserProfessionalInformation")
  interviewExperiences      InterviewExperience[]     @relation("UserInterviewExperience")
  eventsAttended            EventAttendee[]           @relation("UserToEventAttendees")
  societyTestimonials       SocietyTestimonial[]      @relation("UserinSocietyTestimonial")
  societyMember             SocietyMember[]           @relation("SocietyMember")
  societyUser               SocietyProfile[]          @relation("SocietyUsers")
  jobPosting                JobsPosting[]             @relation("UserJobsPosting")
  societyStudentAchievement StudentAchievement[]      @relation("SocietyStudentAchievement")
  studentMarkings           StudentMarking[]          @relation("SocietyStudentMarking")
  jobsApplication           JobApplication[]          @relation("UserToJobsApplication")
  mentorshipPrograms        MentorshipProgram[]       @relation("UserToMentorship")
  mentorshipApplications    MentorshipApplication[]   @relation("UserMentorshipApplication")
  verification    VerificationToken?
  resetToken      PasswordResetToken?
}

model VerificationToken {
  id        BigInt   @id @default(autoincrement())
  token     String
  email     String   @unique
  user      User     @relation(fields: [email], references: [email])
  expiresAt DateTime
}

model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  token     String
  email     String   @unique
  user      User     @relation(fields: [email], references: [email])
  expiresAt DateTime
}

model Gallary {
  gallaryId        BigInt          @id @default(autoincrement())
  imageUrl         String
  imageTitle       String
  imageDescription String
  societyId        BigInt?
  society          SocietyProfile? @relation("GallerySociety", fields: [societyId], references: [societyId], onDelete: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Album {
  albumId          BigInt         @id @default(autoincrement())
  albumName        String
  albumDescription String
  albumThumbnail   String
  images           AlumniImages[] @relation("AlbumImages")
}

model AlumniImages {
  imageId          BigInt @id @default(autoincrement())
  imageTitle       String
  imageDescription String
  imageUrl         String
  albumId          BigInt
  album            Album  @relation("AlbumImages", fields: [albumId], references: [albumId], onDelete: Cascade)
}

model ProfessionalInformation {
  professionalInformationId BigInt    @id @default(autoincrement())
  userId                    BigInt
  companyName               String
  position                  String
  CTC                       String
  employmentType            String
  startDate                 DateTime
  endDate                   DateTime?
  isApproved                Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  user                      User      @relation("UserProfessionalInformation", fields: [userId], references: [userId], onDelete: Cascade)
}

model JobsPosting {
  jobsPostingId    BigInt           @id @default(autoincrement())
  userId           BigInt
  jobTitle         String
  jobDescription   String
  companyName      String
  companyLocation  String
  jobMode          String // Remote , Onsite, Hybrid
  jobType          String // Full-time, Part-time, Internship
  jobCategory      String // Techincal, Non-tech etc..
  expectedSalary   String
  applyLink        String
  requiredSkills   String // Comma-separated skills
  qualifications   String
  responsibilities String
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation("UserJobsPosting", fields: [userId], references: [userId], onDelete: Cascade)
  applications     JobApplication[] @relation("JobsPostingApplications")
}

model JobApplication {
  jobApplicationId BigInt            @id @default(autoincrement())
  jobPostingId     BigInt
  userId           BigInt
  status           ApplicationStatus @default(PENDING) // Pending, Shortlisted, Rejected, Hired
  resumeUrl        String // Resume link
  coverLetter      String?
  appliedAt        DateTime          @default(now())

  jobPosting JobsPosting @relation("JobsPostingApplications", fields: [jobPostingId], references: [jobsPostingId], onDelete: Cascade)
  user       User        @relation("UserToJobsApplication", fields: [userId], references: [userId], onDelete: Cascade)
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  REJECTED
  HIRED
}

model InterviewExperience {
  interviewExperienceId BigInt   @id @default(autoincrement())
  userId                BigInt
  Title                 String
  company               String
  description           String
  isApproved            Boolean  @default(false)
  interviewBody         String
  interviewDate         DateTime
  onCampus              Boolean
  refferal              Boolean
  anyTips               String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation("UserInterviewExperience", fields: [userId], references: [userId], onDelete: Cascade)
}

model Event {
  eventId          BigInt          @id @default(autoincrement())
  eventName        String
  eventDescription String
  eventDate        DateTime
  eventType        String
  eventLocation    String
  eventImage       String
  eventMode        String
  category         String
  subcategory      String
  linkToRegister   String
  attendees        EventAttendee[] @relation("EventToAttendees")
  societyId        BigInt?
  society          SocietyProfile? @relation("EventsOfSociety", fields: [societyId], references: [societyId])
}

model EventAttendee {
  eventAttendeeId BigInt @id @default(autoincrement())
  eventId         BigInt
  userId          BigInt
  role            String // e.g Speaker Attende Mentor etc.
  event           Event  @relation("EventToAttendees", fields: [eventId], references: [eventId], onDelete: Cascade)
  user            User   @relation("UserToEventAttendees", fields: [userId], references: [userId], onDelete: Cascade)
}

model News {
  newsId          BigInt          @id @default(autoincrement())
  newsTitle       String
  newsDescription String
  newsImage       String
  newsDate        DateTime
  isActive        Boolean         @default(true)
  author          String
  societyId       BigInt?
  society         SocietyProfile? @relation("NewsSociety", fields: [societyId], references: [societyId])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Notice {
  noticeId          BigInt   @id @default(autoincrement())
  noticeTitle       String
  noticeDescription String?
  noticeDate        DateTime
  noticeLink        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MentorshipProgram {
  id            BigInt                  @id @default(autoincrement())
  title         String
  mentorType    MentorType
  description   String
  category      String
  duration      String
  prerequisites String?
  schedule      String
  status        ProgramStatus
  applications  MentorshipApplication[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  // Mentor can be either Faculty or Alumni
  facultyMentorId BigInt?
  alumniMentorId  BigInt?

  facultyMentor Faculty? @relation("FacultyToMentorship", fields: [facultyMentorId], references: [facultyId], onDelete: Cascade, map: "MentorshipProgram_facultyMentor_fkey")
  alumniMentor  User?    @relation("UserToMentorship", fields: [alumniMentorId], references: [userId], onDelete: Cascade, map: "MentorshipProgram_alumniMentor_fkey")
}

// Enum to specify whether mentor is a Faculty or an Alumni
enum MentorType {
  FACULTY
  ALUMNI
}

enum ProgramStatus {
  ACTIVE
  UPCOMING
  COMPLETED
}

model MentorshipApplication {
  id           BigInt            @id @default(autoincrement())
  userId       BigInt
  user         User              @relation("UserMentorshipApplication", fields: [userId], references: [userId], onDelete: Cascade)
  mentorshipId BigInt
  mentorship   MentorshipProgram @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  status       ApplStatus
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum ApplStatus {
  PENDING
  APPROVED
  REJECTED
}

//done
model SocietyProfile {
  societyId           BigInt               @id
  facultyId           BigInt
  societyType         String
  societyName         String
  societyHead         String
  dateOfRegistration  DateTime
  societyDescription  String
  societyImage        String
  societyEmail        String               @unique
  societyHeadMobile   String
  societyWebsite      String
  isApproved          Boolean              @default(false)
  testimonials        SocietyTestimonial[] @relation("ProfileOfSociety")
  societyAchievements SocietyAchievement[] @relation("AchievementOfSociety")
  societyMembers      SocietyMember[]      @relation("MemberOfSociety")
  gallery             Gallary[]            @relation("GallerySociety")
  news                News[]               @relation("NewsSociety")
  events              Event[]              @relation("EventsOfSociety")
  users               User[]               @relation("SocietyUsers")
  studentAchievements StudentAchievement[] @relation("AchievementOfStudent")
  studentMarking      StudentMarking[]     @relation("StudentMarkings")
  society             Faculty              @relation("SocietyFaculty", fields: [facultyId], references: [facultyId])
  Roles               SocietyRole[]        @relation("RoleSociety")
}

//done
model SocietyAchievement {
  societyAchievementId BigInt         @id
  societyId            BigInt
  society              SocietyProfile @relation("AchievementOfSociety", fields: [societyId], references: [societyId])
  title                String
  description          String
  dateAchieved         DateTime
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model SocietyTestimonial {
  userId               BigInt
  user                 User           @relation("UserinSocietyTestimonial", fields: [userId], references: [userId])
  societyId            BigInt
  society              SocietyProfile @relation("ProfileOfSociety", fields: [societyId], references: [societyId])
  societyTestimonialId BigInt         @id
  description          String
}

//done
model StudentAchievement {
  societyId     BigInt
  userId        BigInt
  achievementId Int            @id
  title         String
  description   String
  dateAchieved  DateTime
  users         User           @relation("SocietyStudentAchievement", fields: [userId], references: [userId])
  society       SocietyProfile @relation("AchievementOfStudent", fields: [societyId], references: [societyId])
}

model StudentMarking {
  userId        BigInt
  societyId     BigInt
  markingId     BigInt         @id @default(autoincrement())
  studentGrades String
  society       SocietyProfile @relation("StudentMarkings", fields: [societyId], references: [societyId])
  user          User           @relation("SocietyStudentMarking", fields: [userId], references: [userId])
}

//done
model SocietyMember {
  memberId             BigInt         @id @default(autoincrement())
  userId               BigInt
  user                 User           @relation("SocietyMember", fields: [userId], references: [userId])
  societyId            BigInt
  society              SocietyProfile @relation("MemberOfSociety", fields: [societyId], references: [societyId])
  societyPosition      String
  domainExpertise      String
  memberType           String
  studentContributions String
  isApproved           Boolean        @default(true)
  isActiveMember       Boolean        @default(true)
  dateJoined           DateTime
  dateResigned         DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

// model SocietyGallery {
//   societyGalleryId Int @id @default(autoincrement())
//   societyId Int
//   society SocietyProfile @relation("GallerySociety",fields: [societyId], references: [societyId])
//   imageUrl String
//   imageTitle String
//   imageDescription String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model SocietyNews {
//   societyNewsId Int @id @default(autoincrement())
//   societyId Int
//   society SocietyProfile @relation("NewsSociety",fields: [societyId], references: [societyId])
//   newsTitle String
//   newsDescription String
//   dateOfNews DateTime
//   author String
//   anyImageUrl String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model SocietyRole {
  societyRoleId    BigInt         @id @default(autoincrement())
  societyId        BigInt
  roleType         String
  roleName         String
  roleDescription  String
  lastDateToApply  DateTime
  Responsibilities String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  society          SocietyProfile @relation("RoleSociety", fields: [societyId], references: [societyId])
}

//Asset management Schema

enum StatusAsset {
  PENDING
  INPROGRESS
  COMPLETE
}

enum Condition {
  New
  Good
  Needs_Repair
}

model Room {
  roomId     BigInt    @id @default(autoincrement())
  roomType   String
  isActive   Boolean
  FloorNo    Int
  Condition  Condition
  Location   String
  isCreated  DateTime  @default(now())
  isModified DateTime  @default(now())
}

model Equipment {
  equipmentId   BigInt    @id @default(autoincrement())
  Location      String
  equipmentType String
  warranty      String
  purchaseDate  DateTime
  issueHistory  String
  condition     Condition
  qrCode        String
  isCreated     DateTime  @default(now())
  isModified    DateTime  @default(now())
  isActive      Boolean
}

model Issue {
  issueId       BigInt      @id @default(autoincrement())
  Location      String
  equipmentType String
  warranty      String
  purchaseDate  DateTime
  issueHistory  String
  condition     Condition
  qrCode        String
  isCreated     DateTime    @default(now())
  isModified    DateTime    @default(now())
  isActive      Boolean
  Status        StatusAsset
}

model EquipmentType {
  equipmentTypeId BigInt   @id @default(autoincrement())
  Types           String
  Quantity        Int
  Title           String
  Description     String
  isActive        Boolean
  dateCreated     DateTime @default(now())
  dateModified    DateTime @default(now())
}

model Remarks {
  remarkId     BigInt   @id @default(autoincrement())
  remark       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @default(now())
}

model NotificationAsset {
  notificationId          BigInt   @id @default(autoincrement())
  notificationTitle       String
  notificationDescription String
  dateCreated             DateTime @default(now())
  isActive                Boolean
}
