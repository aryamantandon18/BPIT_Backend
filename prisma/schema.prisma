generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Achievement Schema
model Achievement {
  achievementId     Int                @id @default(autoincrement())
  userId            Int
  title             String
  description       String
  startDate         DateTime
  endDate           DateTime
  organizedBy       String
  mode              Mode
  isTechnical       Boolean
  result            String
  certificate       String?
  status            Status             @default(PENDING)
  dateCreated       DateTime           @default(now())
  dateModified      DateTime           @updatedAt
  images            AchievementImage[]
  user              User               @relation("UserAchievements", fields: [userId], references: [userId])
}

model AchievementImage {
  id            Int         @id @default(autoincrement())
  achievementId Int
  imageUrl      String
  achievement   Achievement @relation(fields: [achievementId], references: [achievementId])

  @@map("achievementImages")
}

model AchievementAnnouncement {
  id            Int      @id @default(autoincrement())
  userId        Int
  achievementId Int
  mentorId      Int
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
}

model VerificationRequest {
  id            Int      @id @default(autoincrement())
  achievementId Int
  studentId     Int
  mentorId      Int
  status        Status @default(PENDING)
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  content      String
  status       Status
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt
}

// For Achievements project
enum Mode {
  ONLINE
  OFFLINE
}
enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

// For Society project
enum SocietyStatus {
  ACTIVE
  INACTIVE
}
enum SocietyType {
  TECHNICAL
  NON_TECHNICAL
}


// Combined Schema
model Faculty {
  facultyId         Int      @id @default(autoincrement())
  name              String
  department        String
  specialization    String
  joiningDate       DateTime
  resigningDate     DateTime
  phone             String   @unique
  email             String   @unique
  position          String
  designation       String
  profilePictureUrl String
  others String
  isActiveFaculty Boolean @default(true)
  users      User[]  @relation("FacultyUsers")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  facultySociety SocietyProfile[] @relation("SocietyFaculty")
}

model User {
  userId                   Int                       @id @default(autoincrement())
  societyId                Int
  firstName                String
  lastName                 String
  email                    String                    @unique
  mobile                   String                    @unique
  enrollmentNumber         Int                    @unique
  password                 String
  section                  String
  role                     Role
  branch                   String
  passingYear              Int
  fathersName              String
  mothersName              String
  hobby                    String
  parentsPhone             String
  isApproved               Boolean                   @default(false)
  isVerified               Boolean                   @default(false)
  profilePictureUrl        String?
  githubProfileUrl         String?
  linkedInProfileUrl       String?
  twitterProfileUrl        String?
  gfgProfileUrl            String?
  codingNinjaProfileUrl    String?
  leetcodeProfileUrl       String?
  codeforcesProfileUrl     String?
  instagramProfileUrl      String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  facultyId                Int
  faculty                  Faculty                @relation("FacultyUsers", fields: [facultyId], references: [facultyId])
  achievements             Achievement[]             @relation("UserAchievements")
  professionalInformations ProfessionalInformation[] @relation("UserProfessionalInformation")
  interviewExperiences     InterviewExperience[] @relation("UserInterviewExperience")
  eventsAttended           EventAttendee[] @relation("UserToEventAttendees")
  equipmentComplaints      EquipmentHistory[] @relation("UserToEquipment")
  societyTestimonials      SocietyTestimonial[] @relation("UserinSocietyTestimonial")
  societyMember            SocietyMember[] @relation("SocietyMember")
  societyUser              SocietyProfile[] @relation("SocietyUsers")
  jobPosting               JobsPosting[] @relation("UserJobsPosting")
  societyStudentAchievement StudentAchievement[] @relation("SocietyStudentAchievement")
  studentMarkings StudentMarking[] @relation("SocietyStudentMarking")
}


model Gallary {
  gallaryId        Int      @id @default(autoincrement())
  imageUrl         String
  imageTitle       String
  imageDescription String
  societyId Int?
  society SocietyProfile? @relation("GallerySociety",fields: [societyId], references: [societyId])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ProfessionalInformation {
  professionalInformationId Int       @id @default(autoincrement())
  userId                    Int
  companyName               String
  position                  String
  CTC                       String
  employmentType            String
  startDate                 DateTime
  endDate                   DateTime?
  isApproved                Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  user                      User      @relation("UserProfessionalInformation", fields: [userId], references: [userId])
}

model JobsPosting {
  jobsPostingId Int @id @default(autoincrement())
  userId        Int
  jobTitle      String
  jobDescription String
  companyName String
  companyLocation String
  jobMode   String      // Remote , Onsite, Hybrid
  jobType       String  // Full-time, Part-time, Internship
  jobCategory   String  // Techincal, Non-tech etc..
  expectedSalary String
  applyLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation("UserJobsPosting", fields: [userId], references: [userId])
}

model InterviewExperience {
  interviewExperienceId Int      @id @default(autoincrement())
  userId                Int
  Title                 String
  company               String
  description           String
  isApproved            Boolean  @default(false)
  interviewBody         String
  interviewDate         DateTime
  onCampus              Boolean
  refferal              Boolean
  anyTips               String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation("UserInterviewExperience", fields: [userId], references: [userId])
}

model Event {
  eventId          Int             @id @default(autoincrement())
  eventName        String
  eventDescription String
  eventDate        DateTime
  eventType        String
  eventLocation    String
  eventImage       String
  eventMode        String
  category         String
  subcategory      String
  linkToRegister   String
  attendees        EventAttendee[] @relation("EventToAttendees")
  societyId        Int?
  society          SocietyProfile? @relation("EventsOfSociety",fields: [societyId], references: [societyId])
}

model EventAttendee {
  eventAttendeeId Int   @id @default(autoincrement())
  eventId         Int
  userId          Int
  role            String // e.g Speaker Attende Mentor etc.
  event           Event @relation("EventToAttendees", fields: [eventId], references: [eventId])
  user            User  @relation("UserToEventAttendees", fields: [userId], references: [userId])
}

model News {
  newsId          Int @id @default(autoincrement())
  newsTitle       String
  newsDescription String
  newsImage       String
  newsDate        DateTime
  isActive        Boolean @default(true)
  author          String
  societyId Int?
  society SocietyProfile? @relation("NewsSociety",fields: [societyId], references: [societyId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notice {
  noticeId        Int @id @default(autoincrement())
  noticeTitle     String
  noticeDescription String?
  noticeDate      DateTime
  noticeLink      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

//done
model SocietyProfile {
  societyId          Int      @id 
  facultyId          Int 
  societyType        String
  societyName        String
  societyHead        String
  dateOfRegistration DateTime
  societyDescription String
  societyImage       String
  societyEmail       String @unique
  societyHeadMobile  String
  societyWebsite     String
  isApproved         Boolean @default(false)
  testimonials        SocietyTestimonial[] @relation("ProfileOfSociety")
  societyAchievements SocietyAchievement[] @relation("AchievementOfSociety")
  societyMembers     SocietyMember[] @relation("MemberOfSociety")
  gallery            Gallary[] @relation("GallerySociety")
  news               News[] @relation("NewsSociety")
  events             Event[] @relation("EventsOfSociety")
  users              User[] @relation("SocietyUsers")
  studentAchievements StudentAchievement[] @relation("AchievementOfStudent")
  studentMarking     StudentMarking[] @relation("StudentMarkings")
  society       Faculty @relation("SocietyFaculty",fields: [facultyId], references: [facultyId])
  Roles SocietyRole[] @relation("RoleSociety")
}

//done
model SocietyAchievement{
  societyAchievementId Int @id 
  societyId           Int
  society             SocietyProfile @relation("AchievementOfSociety",fields: [societyId], references: [societyId])
  title               String
  description         String
  dateAchieved        DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model SocietyTestimonial {
  userId  Int
  user User @relation("UserinSocietyTestimonial",fields: [userId], references: [userId])
  societyId Int
  society SocietyProfile @relation("ProfileOfSociety",fields: [societyId], references: [societyId])
  societyTestimonialId Int @id 
  description String
}

//done
model StudentAchievement {
  societyId     Int
  userId Int
  achievementId Int @id
  title         String
  description   String
  dateAchieved  DateTime
  users         User @relation("SocietyStudentAchievement", fields: [userId], references: [userId])
  society       SocietyProfile @relation("AchievementOfStudent",fields: [societyId], references: [societyId])
}

model StudentMarking {
  userId        Int       
  societyId     Int
  markingId     Int     @id @default(autoincrement())
  studentGrades String
  society       SocietyProfile @relation("StudentMarkings",fields: [societyId], references: [societyId])
  user User @relation("SocietyStudentMarking",fields: [userId], references: [userId])

}

//done
model SocietyMember{
  memberId Int @id @default(autoincrement())
  userId  Int 
  user User @relation("SocietyMember",fields: [userId], references: [userId])
  societyId Int
  society SocietyProfile @relation("MemberOfSociety",fields: [societyId], references: [societyId])
  societyPosition String
  domainExpertise String
  memberType String
  studentContributions String
  isApproved Boolean @default(true)
  isActiveMember Boolean @default(true)
  dateJoined DateTime
  dateResigned DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model SocietyGallery {
//   societyGalleryId Int @id @default(autoincrement())
//   societyId Int
//   society SocietyProfile @relation("GallerySociety",fields: [societyId], references: [societyId])
//   imageUrl String
//   imageTitle String
//   imageDescription String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model SocietyNews {
//   societyNewsId Int @id @default(autoincrement())
//   societyId Int
//   society SocietyProfile @relation("NewsSociety",fields: [societyId], references: [societyId])
//   newsTitle String
//   newsDescription String
//   dateOfNews DateTime
//   author String
//   anyImageUrl String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model SocietyRole {
  societyRoleId Int @id @default(autoincrement())
  societyId Int
  roleType String
  roleName String
  roleDescription String
  lastDateToApply DateTime
  Responsibilities String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  society SocietyProfile @relation("RoleSociety",fields: [societyId], references:[societyId])

}

model Equipment {
  equipmentId        Int                @id @default(autoincrement())
  equipmentName      String
  equipmentNumber    BigInt
  category           String
  price              String
  warranty           String
  supplier           String
  lastMaintenance    DateTime
  remarks            String
  equipmentHistories EquipmentHistory[] @relation("EquipmentToHistory")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Room {
  roomId              Int      @id @default(autoincrement())
  roomNumber          Int
  floor               String
  category            String
  message             String
  allotedToDepartment String
  year                String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model EquipmentHistory {
  equipmentHistoryId Int       @id @default(autoincrement())
  equipmentId        Int
  userId             Int
  title              String
  description        String
  isSolved           Boolean   @default(false)
  complaintDate      DateTime
  SolvedDate         DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation("UserToEquipment", fields: [userId], references: [userId])
  equipment          Equipment @relation("EquipmentToHistory", fields: [equipmentId], references: [equipmentId])
}

enum Role {
  STUDENT
  ALUMNI
}

model Issue {
  id Int @default(autoincrement()) @id
  Designation String
  Name String
  Enrollmentno String
  Location String
  Area String
  Floorno String
  Roomno String
  Itemtype String
  Equipmentid String
  Issuedescription String
  Status String
}
